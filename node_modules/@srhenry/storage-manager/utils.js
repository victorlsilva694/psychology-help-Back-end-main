"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogicGates = exports.isAsyncIterable = exports.isIterable = exports.removeLastElement = void 0;
/**
 * A function that removes its last element of an array-like list and
 *
 * @template {T extends Array<U>} T - An array-like object type
 * @template U Arbitrary unknown type of the array-like object
 *
 * @param {T} list The list to remove the last element of it
 *
 * @returns {T} The list without the last element of it
 */
function removeLastElement(list) {
    list.pop();
    return list;
}
exports.removeLastElement = removeLastElement;
/** Check if given input is Iterable */
function isIterable(obj) {
    return obj[Symbol.iterator] === "function";
}
exports.isIterable = isIterable;
/** Check if given input is AsyncIterable */
function isAsyncIterable(obj) {
    return obj[Symbol.asyncIterator] === "function";
}
exports.isAsyncIterable = isAsyncIterable;
var LogicGates;
(function (LogicGates) {
    /**
 * Logic gate 'AND' to many inputs.
 *
 * @param values input list of argument values.
 *
 * @returns result of nested 'AND' Logic gate.
 */
    LogicGates.AND = (...values) => values.reduce((p, v) => (p && !!v), true);
    /**
     * Logic gate 'OR' to many inputs.
     *
     * @param values input list of argument values.
     *
     * @returns result of nested 'OR' Logic gate.
     */
    LogicGates.OR = (...values) => {
        for (const value of values)
            if (!!value)
                return true;
        return false;
    };
    /**
     * Logic gate 'NOT'.
     *
     * @param value input value.
     *
     * @returns result of 'NOT' Logic gate.
     */
    LogicGates.NOT = (value) => !value;
    /**
     * Logic gate 'NAND' (Not AND) to many inputs.
     * It applies 'AND' to all values then apply 'NOT' for the result.
     *
     * @param values input list of argument values.
     *
     * @returns result of nested 'NAND' Logic gate.
     */
    LogicGates.NAND = (...values) => LogicGates.NOT(LogicGates.AND(...values));
    /**
     * Logic gate 'NOR' (Not OR) to many inputs.
     * It applies 'OR' to all values then apply 'NOT' for the result.
     *
     * @param values input list of argument values.
     *
     * @returns result of nested 'NOR' Logic gate.
     */
    LogicGates.NOR = (...values) => LogicGates.NOT(LogicGates.OR(...values));
    /**
     * Logic gate 'XOR' (eXclusive OR) to many inputs.
     * Returns true if only one of the inputs are true, false otherwise.
     *
     * @param values input list of argument values.
     *
     * @returns result of 'XOR' Logic gate.
     */
    LogicGates.XOR = (...values) => LogicGates.OR(...values) && LogicGates.OR(...(values.map(LogicGates.NOT)));
    /**
     * Logic gate 'XNOR' (eXclusive Not OR) to many inputs.
     * Returns false if only one of the inputs are true, true otherwise.
     * Same as applying 'XOR' then 'NOT'.
     *
     * @param values input list of argument values.
     *
     * @returns result of 'XNOR' Logic gate.
     */
    LogicGates.XNOR = (...values) => LogicGates.NOT(LogicGates.XOR(...values));
})(LogicGates = exports.LogicGates || (exports.LogicGates = {}));
