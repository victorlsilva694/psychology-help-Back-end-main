/// <reference types="node" />
import { TypeOfTag } from "typescript";
import { Stats } from "fs";
export declare type RecursiveType<T> = T | RecursiveType<T>[];
export declare type DirectoryListJSONContent = Array<string | DirectoryListJSON>;
export declare type DirectoryListJSON = {
    [name: string]: Array<string | DirectoryListJSON>;
};
/**
 * Wrapper for directory structure in filesystem. May be recursive
 */
export declare class DirectoryList {
    private struct;
    private _name;
    private _stats?;
    get name(): string;
    set name(name: string);
    /**
     * Stats info of directory.
     * @see {@link Stats NodeJS.fs.Stats}
     */
    get stats(): Stats | undefined;
    constructor(instance?: DirectoryList);
    constructor(name: string, struct: Array<string | DirectoryList>);
    constructor(name: string, struct: Array<string | DirectoryList>, stats: Stats);
    [Symbol.iterator](): Iterator<string | DirectoryList>;
    [Symbol.toPrimitive](hint: TypeOfTag): string | void;
    private __toString;
    toString(): string;
    /** Get JSON representation of inner directory structure on filesystem */
    get(fullname?: boolean): DirectoryListJSONContent;
    /**
     * Prefered method to serialize instance
     * @since 1.3.0
     */
    toJSON(fullname?: boolean, root?: boolean): DirectoryListJSON;
}
/** Alias for {@link DirectoryList} */
export declare const Directory: typeof DirectoryList;
export default DirectoryList;
