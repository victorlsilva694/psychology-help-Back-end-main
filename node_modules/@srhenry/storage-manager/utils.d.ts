/**
 * A function that removes its last element of an array-like list and
 *
 * @template {T extends Array<U>} T - An array-like object type
 * @template U Arbitrary unknown type of the array-like object
 *
 * @param {T} list The list to remove the last element of it
 *
 * @returns {T} The list without the last element of it
 */
export declare function removeLastElement<T extends Array<U>, U>(list: T): T;
/** Check if given input is Iterable */
export declare function isIterable(obj: any): obj is Iterable<any>;
/** Check if given input is AsyncIterable */
export declare function isAsyncIterable(obj: any): obj is AsyncIterable<any>;
/** Omit an subtype from given type */
export declare type IgnoreUnionType<T, U = unknown> = T extends U ? never : T;
export declare namespace LogicGates {
    /**
 * Logic gate 'AND' to many inputs.
 *
 * @param values input list of argument values.
 *
 * @returns result of nested 'AND' Logic gate.
 */
    const AND: (...values: any[]) => boolean;
    /**
     * Logic gate 'OR' to many inputs.
     *
     * @param values input list of argument values.
     *
     * @returns result of nested 'OR' Logic gate.
     */
    const OR: (...values: any[]) => boolean;
    /**
     * Logic gate 'NOT'.
     *
     * @param value input value.
     *
     * @returns result of 'NOT' Logic gate.
     */
    const NOT: (value: any) => boolean;
    /**
     * Logic gate 'NAND' (Not AND) to many inputs.
     * It applies 'AND' to all values then apply 'NOT' for the result.
     *
     * @param values input list of argument values.
     *
     * @returns result of nested 'NAND' Logic gate.
     */
    const NAND: (...values: any[]) => boolean;
    /**
     * Logic gate 'NOR' (Not OR) to many inputs.
     * It applies 'OR' to all values then apply 'NOT' for the result.
     *
     * @param values input list of argument values.
     *
     * @returns result of nested 'NOR' Logic gate.
     */
    const NOR: (...values: any[]) => boolean;
    /**
     * Logic gate 'XOR' (eXclusive OR) to many inputs.
     * Returns true if only one of the inputs are true, false otherwise.
     *
     * @param values input list of argument values.
     *
     * @returns result of 'XOR' Logic gate.
     */
    const XOR: (...values: any[]) => boolean;
    /**
     * Logic gate 'XNOR' (eXclusive Not OR) to many inputs.
     * Returns false if only one of the inputs are true, true otherwise.
     * Same as applying 'XOR' then 'NOT'.
     *
     * @param values input list of argument values.
     *
     * @returns result of 'XNOR' Logic gate.
     */
    const XNOR: (...values: any[]) => boolean;
}
